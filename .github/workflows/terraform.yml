name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  # VAULT_ADDR: "https://vault-111.34-83-87-204.sslip.io"
  VAULT_NAMESPACE: "user1"
  
jobs:
  retrieve-secret:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Retrieve secret from Vault
        uses: hashicorp/vault-action@v2.4.0
        with:
          exportToken: true
          method: jwt
          path: jwt-github
          url: https://a3b9-184-144-40-103.ngrok.io
          namespace: "root"
          role: "vault-test-10"
          secrets: |
            secret/data/github foo | FOO ;
            secret/data/github zig | ZIG

      - name: Use secret from Vault
        run: "echo '${{ steps.secrets.outputs.foo }}'" 
  terraform:

    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Set JWT Auth Token
      id: auth-token
      run: |
          export TOKEN=$(curl -sSL -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL")
          # echo $TOKEN | jq .value | base64
          echo "token=$(echo $TOKEN)" >> $GITHUB_OUTPUT
          
    - name: Get Vault Github Token
      id: grab-token
      run: |
          export TOKEN_JSON=$(echo $GITHUB_OIDC_TOKEN | jq "{ jwt: .value, role: \"$VAULT_ROLE\" }")
          # echo $TOKEN_JSON | jq -r '.jwt | split(".") | .[1] | @base64d' | jq
          export VAULT_LOGIN_DATA=$(echo $TOKEN_JSON | curl -sSLf -X PUT -H "Content-Type: application/json" --data @- $VAULT_ADDR/v1/auth/jwt/login)

          echo $VAULT_LOGIN_DATA
          export VAULT_TOKEN=$(echo $VAULT_LOGIN_DATA | jq -r .auth.client_token)
          echo $VAULT_TOKEN
          echo "vault_token=$(echo $VAULT_TOKEN)" >> $GITHUB_OUTPUT

      env:
        VAULT_ROLE: "git-onboarding"
        GITHUB_OIDC_TOKEN: ${{ steps.auth-token.outputs.token }}

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # - name: Terraform Init
    #   run: |
    #     terraform init -input=false

    # # Generates an execution plan for Terraform
    # # - name: Terraform Plan
    # #   run: |
    # #     echo $VAULT_ADDR
    # #     echo $VAULT_NAMESPACE
    # #     terraform plan -input=false
    # #   env:
    # #     TF_VAR_vault_github_token: ${{ steps.grab-token.outputs.VAULT_TOKEN }}
    # #     TF_VAR_vault_addr: ${{ env.VAULT_ADDR }}
    # #     TF_VAR_vault_namespace: ${{ env.VAULT_NAMESPACE }}
    # #     TF_LOG: debug

    #   # On push to "main", build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   run: terraform apply -auto-approve -input=false -target=module.create_namespace
    #   env:
    #     TF_VAR_vault_github_token: ${{ steps.grab-token.outputs.VAULT_TOKEN }}
    #     TF_VAR_vault_addr: ${{ env.VAULT_ADDR }}
    #     TF_VAR_vault_namespace: ${{ env.VAULT_NAMESPACE }}
    #     TF_LOG: debug

    # - name: Terraform Apply
    #   run: terraform apply -auto-approve -input=false
    #   env:
    #     TF_VAR_vault_github_token: ${{ steps.grab-token.outputs.VAULT_TOKEN }}
    #     TF_VAR_vault_addr: ${{ env.VAULT_ADDR }}
    #     TF_VAR_vault_namespace: ${{ env.VAULT_NAMESPACE }}
    #     TF_LOG: debug

    # - name: Terraform Show Output
    #   run: terraform output admin_token
    #   env:
    #     TF_VAR_vault_github_token: ${{ steps.grab-token.outputs.VAULT_TOKEN }}
    #     TF_VAR_vault_addr: ${{ env.VAULT_ADDR }}
    #     TF_VAR_vault_namespace: ${{ env.VAULT_NAMESPACE }}

    # REVOKE GITHUB TOKEN !!!!!
    - name: Revoke Github Token
      run: |
        curl -sSLf -X PUT -H "Content-Type: application/json" -H X-Vault-Token:${VAULT_TOKEN} $VAULT_ADDR/v1/auth/token/revoke-self
      env:
        VAULT_TOKEN: ${{ steps.grab-token.outputs.VAULT_TOKEN }}

    # - name: Generate User Token
    #   id: grab-token
    #   run: |
    #       export VAULT_LOGIN_DATA=$(echo $TOKEN_JSON | curl -sSLf -X PUT -H X-Vault-Token: ${{ steps.grab-token.outputs.VAULT_TOKEN }} -H X-Vault-Namespace: ${{ steps.grab-token.outputs.VAULT_NAMESPACE }} $VAULT_ADDR/v1/auth/jwt/login)

    #       echo $VAULT_LOGIN_DATA
    #       export VAULT_TOKEN=$(echo $VAULT_LOGIN_DATA | jq -r .auth.client_token)
    #       echo $VAULT_TOKEN
    #       echo "vault_token=$(echo $VAULT_TOKEN)" >> $GITHUB_OUTPUT
    # - name: Revoke Github token
      
